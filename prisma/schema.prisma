// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//Creating Database Models

//Categories Table
model categories{
  id Int @id @default(autoincrement())

  name String @db.VarChar(100) @unique
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
  
  //Relations
  news_list news_list[]  //One catagory can have many news but - one to many
}

//News List Table
model news_list{  
  id Int @id @default(autoincrement())  
  title String @db.VarChar(100)
  short_des String @db.VarChar(400)
  img1 String @db.VarChar(300)
  img2 String @db.VarChar(300)
  img3 String @db.VarChar(300)
  img4 String @db.VarChar(300)
  keywords String @db.VarChar(300)
  long_des String @db.LongText  //Long Description
  type String @db.VarChar(200)
  
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  //Relations
  catId Int //Foreign Key For Relation with category
  comments comments[] 
  categories categories @relation(fields: [catId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

//Users Table
model users{
  id Int @id @default(autoincrement())
  firstName String @db.VarChar(50)
  lastName String @db.VarChar(50)
  emai String @db.VarChar(50) @unique
  mobile String @db.VarChar(50)
  password String @db.VarChar(50)
  otp String @db.VarChar(50)

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

  //Relations
  comments comments[]
}

//Comments Table
model comments{
  id Int @id @default(autoincrement())
  userId Int  //Foreign Key
  postId Int
  description String @db.VarChar(1000)

  //Relations
  users users @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade )
  news_list news_list @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade )
}

//Social Links Table
model social{
  id Int @id @default(autoincrement())
  facebook String @db.VarChar(200)
  twitter String @db.VarChar(200)
  youtube String @db.VarChar(200)
  linkedin String @db.VarChar(200)
  about String @db.Text
  address String @db.Text

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt
}

//Subscribers Table
model subscribers{
  id Int @id @default(autoincrement())
  email String @db.VarChar(100) @unique

  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @default(now()) @db.Timestamp(0) @updatedAt

}

//Policies
model policies{
  id Int @id @default(autoincrement())
  long_des String @db.LongText
  type String @db.VarChar(50)
}